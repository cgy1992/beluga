./d-expr-unary-1.c:1:37: warning - uninitialized reference to `p'
  void f1(void) { int *p; int x; x = *p; x = *x; }    /* error */
                                      ^
./d-expr-unary-1.c:1:44: ERROR - pointer required but `int' given
  void f1(void) { int *p; int x; x = *p; x = *x; }    /* error */
                                             ^
./d-expr-unary-1.c:1:29: warning - local `x' set but not meaningfully used
  void f1(void) { int *p; int x; x = *p; x = *x; }    /* error */
                              ^
./d-expr-unary-1.c:2:45: ERROR - taking address of register is not allowed
  void f2(void) { register int x; int *p; p = &x; p = &p; }    /* error */
                                              ^
./d-expr-unary-1.c:2:51: ERROR - operands of = have illegal types `pointer to int' and `pointer to pointer to int'
  void f2(void) { register int x; int *p; p = &x; p = &p; }    /* error */
                                                    ^
./d-expr-unary-1.c:2:37: warning - local `p' set but not meaningfully used
  void f2(void) { register int x; int *p; p = &x; p = &p; }    /* error */
                                      ^
./d-expr-unary-1.c:3:33: warning - uninitialized reference to `x'
  void f3(void) { int x, *p; x = +x; p = &+x; }    /* error */
                                  ^
./d-expr-unary-1.c:3:40: ERROR - lvalue required
  void f3(void) { int x, *p; x = +x; p = &+x; }    /* error */
                                         ^
./d-expr-unary-1.c:4:41: warning - uninitialized reference to `x'
  void f4(void) { int x; unsigned y; x = -x; x = -y; }    /* warning */
                                          ^
./d-expr-unary-1.c:4:48: warning - unsigned operand of unary -
  void f4(void) { int x; unsigned y; x = -x; x = -y; }    /* warning */
                                                 ^
./d-expr-unary-1.c:4:49: warning - uninitialized reference to `y'
  void f4(void) { int x; unsigned y; x = -x; x = -y; }    /* warning */
                                                  ^
./d-expr-unary-1.c:5:41: warning - uninitialized reference to `x'
  void f5(void) { int x; unsigned y; x = ~x; x = ~y; }
                                          ^
./d-expr-unary-1.c:5:49: warning - uninitialized reference to `y'
  void f5(void) { int x; unsigned y; x = ~x; x = ~y; }
                                                  ^
./d-expr-unary-1.c:6:29: warning - uninitialized reference to `x'
  void f6(void) { int x; x = !x; x = !!x; }
                              ^
./d-expr-unary-1.c:7:26: warning - uninitialized reference to `x'
  void f7(void) { int x; ++x; }
                           ^
./d-expr-unary-1.c:8:24: warning - expression result not used
  void f8(void) { int x; sizeof(int); sizeof(int *); sizeof x; sizeof &x; sizeof(x, &x); }
                         ^
./d-expr-unary-1.c:8:37: warning - expression result not used
  void f8(void) { int x; sizeof(int); sizeof(int *); sizeof x; sizeof &x; sizeof(x, &x); }
                                      ^
./d-expr-unary-1.c:8:52: warning - expression result not used
  void f8(void) { int x; sizeof(int); sizeof(int *); sizeof x; sizeof &x; sizeof(x, &x); }
                                                     ^
./d-expr-unary-1.c:8:62: warning - expression result not used
  void f8(void) { int x; sizeof(int); sizeof(int *); sizeof x; sizeof &x; sizeof(x, &x); }
                                                               ^
./d-expr-unary-1.c:8:80: warning - expression result not used
  void f8(void) { int x; sizeof(int); sizeof(int *); sizeof x; sizeof &x; sizeof(x, &x); }
                                                                                 ^
./d-expr-unary-1.c:8:73: warning - expression result not used
  void f8(void) { int x; sizeof(int); sizeof(int *); sizeof x; sizeof &x; sizeof(x, &x); }
                                                                          ^
./d-expr-unary-1.c:9:31: warning - signedness of plain bit-field is implementation-defined
  void f9(void) { struct { int x:1; } x; sizeof(int []); sizeof x.x; sizeof(x, x.x); }    /* error */
                                ^
./d-expr-unary-1.c:9:40: ERROR - invalid operand given to sizeof
  void f9(void) { struct { int x:1; } x; sizeof(int []); sizeof x.x; sizeof(x, x.x); }    /* error */
                                         ^
./d-expr-unary-1.c:9:40: warning - expression result not used
  void f9(void) { struct { int x:1; } x; sizeof(int []); sizeof x.x; sizeof(x, x.x); }    /* error */
                                         ^
./d-expr-unary-1.c:9:64: ERROR - bit-field given to sizeof
  void f9(void) { struct { int x:1; } x; sizeof(int []); sizeof x.x; sizeof(x, x.x); }    /* error */
                                                                 ^
./d-expr-unary-1.c:9:56: warning - expression result not used
  void f9(void) { struct { int x:1; } x; sizeof(int []); sizeof x.x; sizeof(x, x.x); }    /* error */
                                                         ^
./d-expr-unary-1.c:9:75: warning - expression result not used
  void f9(void) { struct { int x:1; } x; sizeof(int []); sizeof x.x; sizeof(x, x.x); }    /* error */
                                                                            ^
./d-expr-unary-1.c:9:79: ERROR - bit-field given to sizeof
  void f9(void) { struct { int x:1; } x; sizeof(int []); sizeof x.x; sizeof(x, x.x); }    /* error */
                                                                                ^
./d-expr-unary-1.c:9:68: warning - expression result not used
  void f9(void) { struct { int x:1; } x; sizeof(int []); sizeof x.x; sizeof(x, x.x); }    /* error */
                                                                     ^
./d-expr-unary-1.c:10:11: warning - unsigned operand of unary -
  int x10 = -2147483648;    /* warning */
            ^
./d-expr-unary-1.c:10:11: warning - overflow in converting constant expression from `unsigned long' to `int'
  int x10 = -2147483648;    /* warning */
            ^
